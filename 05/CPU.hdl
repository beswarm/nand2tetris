// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, the ALU executes the inputted instruction according
 * to the Hack machine language specification, as follows. 
 * The D and A in the language specification refer to CPU-resident registers,
 * while M refers to the memory register addressed by A, i.e. to Memory[A].
 * The inM input holds the value of this register. If the current instruction 
 * needs to write a value to M, the value is placed in outM, the address 
 * of the target register is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset == 1, then the 
 * CPU jumps to address 0 (i.e. sets pc = 0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current program
                         // (reset == 1) or continue executing the current
                         // program (reset == 0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // RAM address (of M)
        pc[15];          // ROM address (of next instruction)

     PARTS:


	Mux16(a=aRegister,b=inM,sel=instruction[12],out=am);
	
		 //	 A C-instruction says what to compute, where to store, and maybe where to jump:
	     //
	     //   [15] 1xxa  [11]cccccc   [5]ddd   [2]jjj          
	     //
	     // x - not used
	     // a - 1 if input from memory[A], 0 if input from A
	     // c - computation for the AL
   		 // d - store destination. d1 - A register.  d2 - D register.  d3 - Memory[A].  Can have multiple set.
	     // j - jump.  j1 - jump if negative, j2 - jump if zero, j3 - jump if positive.  Can have multiple set.  Jumps to address in A.
		 //     Special jumps: 000 - no jump. 101 - jump if out != 0.  111 - jump.
			  
	// choose what to do accoording to c-bits
	ALU(x=dRegister,y=am,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=outM1,zr=isZero,ng=isNegative);	

	//ARegister need to change when it's the A-instruction or C-ins d1=1
	Not(in=instruction[15],out=ACondition);
	And(a=instruction[5],b=instruction[15],out=CCondition);
	Or(a=ACondition,b=CCondition,out=changeA);
	Mux16(a=outM1,b=instruction,sel=ACondition,out=dValue);

	ARegister(in=dValue,load=changeA,out=aRegister,out[0..14]=addressM);


	// DRegister are needed to change only when C-instruction and d2=1
	And(a=instruction[4],b=instruction[15],out=changeD);
	DRegister(in=outM1,load=changeD,out=dRegister);


	Mux16(a=false,b=outM1,sel=instruction[15],out=outM);

	// wether to write outM according to d-bits and i bits
	And(a=instruction[3],b=instruction[15],out=writeM);
	


// The PC Part
	//pc need to load when outM1>0&j3=1 OR  outM1=0&j2=0 OR outM1<0&j1=0 &i-bit =1
	Or(a=isZero,b=isNegative,out=both);
	Not(in=both,out=isPositive);

	And(a=isPositive,b=instruction[2],out=JGT);
	And(a=isZero,b=instruction[1],out=JEQ);
	And(a=isNegative,b=instruction[0],out=JLT);
	
	And(a=JGT,b=instruction[15],out=isNeeded1);
	And(a=JEQ,b=instruction[15],out=isNeeded2);
	And(a=JLT,b=instruction[15],out=isNeeded3);
	
	Or(a=isNeeded1,b=isNeeded2,out=isNeeded12);
	Or(a=isNeeded12,b=isNeeded3,out=isNeeded);

	PC(in=aRegister,load=isNeeded,inc=true,reset=reset,out[0..14]=pc);
}
